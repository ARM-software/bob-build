/*
 * Copyright 2019-2020 Arm Limited.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//////////////////////////////////////////////////////////////////////////////
// Case A - generated headers: direct and transitive encapsulation of outputs.
// Test checks proper output encapsulation.
//
// Modules:
// 1 - encapsulation_source1
// 2 - encapsulation_source2
// 3 - encapsulation_source3
//
//                    3 (root module)
//    (encapsulates) /
//                  2
//  (encapsulates) /
//                1
//
bob_generate_source {
    name: "encapsulation_source1",

    srcs: ["srcs/header1.h"],
    out: ["header1.h"],

    cmd: "cp ${in} ${out}",
    export_gen_include_dirs: ["."],
}

bob_generate_source {
    name: "encapsulation_source2",

    srcs: ["srcs/header2.h"],
    out: ["header2.h"],

    cmd: "cp ${in} ${out}",
    export_gen_include_dirs: ["."],
    encapsulates: ["encapsulation_source1"],
}

bob_generate_source {
    name: "encapsulation_source3",

    srcs: ["srcs/header3.h"],
    out: ["header3.h"],

    cmd: "cp ${in} ${out}",
    export_gen_include_dirs: ["."],
    encapsulates: ["encapsulation_source2"],
}

bob_binary {
    name: "validate_source_encapsulation_simple",
    generated_headers: ["encapsulation_source3"],
    srcs: ["test_simple.c"],
}

//////////////////////////////////////////////////////////////////////////////
// Case B - generated headers: direct encapsulation of outputs.
// Test checks interaction of encapsulation with 'module_deps'.
//
// Module 2 depends on module 1 due to 'module_deps' property.
// Module 3 encapsulates module 2 which can see must_have.h but
// not must_not_have.h
//
// Modules:
// 1 - gen_srcs_one
// 2 - gen_srcs_two
// 3 - encapsulation_source_mod_deps
//
//                    3 (root module)
//    (encapsulates) /
//                  2
//   (module_deps) /
//                1
//
bob_generate_source {
    name: "gen_srcs_one",
    out: ["subdir/must_not_have.h"],
    export_gen_include_dirs: ["subdir"],
    cmd: "echo '#define D1 1' > ${out}",
}

bob_generate_source {
    name: "gen_srcs_two",
    out: ["must_have.h"],
    export_gen_include_dirs: ["."],
    cmd: "cat ${gen_srcs_one_out} > ${out}",
    module_deps: ["gen_srcs_one"],
}

bob_generate_source {
    name: "encapsulation_source_mod_deps",
    out: ["types.h"],
    export_gen_include_dirs: ["."],
    cmd: "echo '#define D2 2' > ${out}",
    encapsulates: ["gen_srcs_two"]
}

bob_binary {
    name: "validate_source_encapsulation_mod_deps",
    generated_headers: ["encapsulation_source_mod_deps"],
    srcs: ["test_deps.c"],
    linux: {
        build_wrapper: "source_encapsulation/check_includes.py",
    },
}

//////////////////////////////////////////////////////////////////////////////
// Case C - generated headers: direct encapsulation of outputs.
// Test checks interaction of encapsulation with 'module_srcs'.
//
// Module 2 depends on module 1 due to 'module_srcs' property.
// Module 3 encapsulates module 2 which can see must_have.h but
// not must_not_have.h
//
// Modules:
// 1 - gen_srcs_three
// 2 - gen_srcs_four
// 3 - encapsulation_source_mod_srcs
//
//                    3 (root module)
//    (encapsulates) /
//                  2
//   (module_srcs) /
//                1
//
bob_generate_source {
    name: "gen_srcs_three",
    out: ["subdir/must_not_have.h"],
    export_gen_include_dirs: ["subdir"],
    cmd: "echo '#define D1 1' > ${out}",
}

bob_generate_source {
    name: "gen_srcs_four",
    out: ["must_have.h"],
    export_gen_include_dirs: ["."],
    cmd: "cat ${in} > ${out}",
    module_srcs: ["gen_srcs_three"],
}

bob_generate_source {
    name: "encapsulation_source_mod_srcs",
    out: ["types.h"],
    export_gen_include_dirs: ["."],
    cmd: "echo '#define D2 2' > ${out}",
    encapsulates: ["gen_srcs_four"]
}

bob_binary {
    name: "validate_source_encapsulation_mod_srcs",
    generated_headers: ["encapsulation_source_mod_srcs"],
    srcs: ["test_deps.c"],
}

//////////////////////////////////////////////////////////////////////////////
// Case D - generated headers: direct encapsulation of outputs and implicit outputs.
// Test checks interaction of encapsulation with 'implicit_outs'.
//
// Module 1 has implicit output which should be available due to 2 encapsulating it.
//
// Modules:
// 1 - gen_srcs_five
// 2 - encapsulation_source_implicit_outs
//
//                    2 (root module)
//    (encapsulates) /
//                  1
//
bob_generate_source {
    name: "gen_srcs_five",
    out: ["message.h"],
    implicit_outs: ["impl/implicit.h"],
    export_gen_include_dirs: ["."],
    cmd: "echo '#error \"Error!\"' > ${out} && mkdir -p ${gen_dir}/impl && echo '#define IMPL 1' > ${gen_dir}/impl/implicit.h",
}

bob_generate_source {
    name: "encapsulation_source_implicit_outs",
    out: ["types.h"],
    export_gen_include_dirs: ["."],
    cmd: "echo '#define D3 3' > ${out}",
    encapsulates: ["gen_srcs_five"]
}

bob_binary {
    name: "validate_source_encapsulation_implicit_outs",
    generated_headers: ["encapsulation_source_implicit_outs"],
    srcs: ["test_implicit.c"],
}

//////////////////////////////////////////////////////////////////////////////
// Case E - generated sources: direct and transitive encapsulation of outputs.
// Test should check complex case of direct and transitive encapsulation
// together with use of 'module_srcs' property.
//
// Module 3 uses output of module 4 through 'module_srcs' relation while module
// 4 encapsulates 5.
// This way module 3 should have input of: encapsulation_generated_sources4/funcs.txt
// and encapsulation_generated_sources5/fun5.c. Also it can see:
// encapsulation_generated_sources1/fun1.c and encapsulation_generated_sources2/fun2.c
// cause of encapsulation.
//
// Modules:
// 1 - encapsulation_generated_sources1
// 2 - encapsulation_generated_sources2
// 3 - encapsulation_generated_sources3
// 4 - encapsulation_generated_sources4
// 5 - encapsulation_generated_sources5
//
//                     3
//     (encapsulates) / \ (module_srcs)
//                   2   4
//   (encapsulates) /     \ (encapsulates)
//                 1       5
//
bob_generate_source {
    name: "encapsulation_generated_sources1",

    srcs: ["srcs/fun1.c"],
    out: ["fun1.c"],

    cmd: "cp ${in} ${out}",
}

bob_generate_source {
    name: "encapsulation_generated_sources2",

    srcs: ["srcs/fun2.c"],
    out: ["fun2.c"],

    cmd: "cp ${in} ${out}",
    encapsulates: ["encapsulation_generated_sources1"],
}

bob_generate_source {
    name: "encapsulation_generated_sources5",

    srcs: ["srcs/fun5.c"],
    out: ["fun5.c"],

    cmd: "cp ${in} ${out}",
}

bob_generate_source {
    name: "encapsulation_generated_sources4",

    srcs: ["srcs/fun2.c"],
    out: ["funcs.txt"],

    tool: "extract_funcs.py",
    cmd: "python ${tool} --in ${in} --out ${out}",

    encapsulates: ["encapsulation_generated_sources5"],
}

bob_generate_source {
    name: "encapsulation_generated_sources3",
    module_srcs: ["encapsulation_generated_sources4"],

    out: ["fun3.c"],

    tool: "gen_fun3.py",
    cmd: "python ${tool} --in ${in} --out ${out} --expected encapsulation_generated_sources4/funcs.txt encapsulation_generated_sources5/fun5.c",

    encapsulates: ["encapsulation_generated_sources2"],
}

bob_binary {
    name: "validate_source_encapsulation_generated_sources",
    generated_sources: ["encapsulation_generated_sources3"],
    srcs: ["test_complex.c"],
}

bob_alias {
    name: "bob_test_source_encapsulation",
    srcs: [
        "validate_source_encapsulation_simple",
        "validate_source_encapsulation_mod_deps",
        "validate_source_encapsulation_mod_srcs",
        "validate_source_encapsulation_implicit_outs",
        "validate_source_encapsulation_generated_sources",
    ],
}
