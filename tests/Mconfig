# Copyright 2016-2020 Arm Limited.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "bob/mconfig/basics.Mconfig"

config NOT_OSX
	bool
	default y if !OSX

config NOT_BUILDER_ANDROID_BP
	bool
	default y if !BUILDER_ANDROID_BP

menu "Toolchain Options"

## Select toolchain for Bob
choice
	prompt "Target toolchain"
	default TARGET_TOOLCHAIN_CLANG if ANDROID
	default TARGET_TOOLCHAIN_XCODE if OSX
	default TARGET_TOOLCHAIN_GNU
	help
	  A few different compilers are supported. They are classed by
	  toolchain which allows a limited amount of flexibility to
	  accomodate similar compilers.

	  Select the compiler toolchain to be used when compiling for the target.

config TARGET_TOOLCHAIN_GNU
	bool "GNU"
	help
	  Build with GNU toolchain.

config TARGET_TOOLCHAIN_CLANG
	bool "Clang"
	help
	  Build with Clang toolchain.

	  Linux support is still experimental, and requires the GNU
	  assembler (as) and GNU archiver (ar)

config TARGET_TOOLCHAIN_ARMCLANG
	bool "Arm Compiler 6"
	help
	  This is the toolchain at https://developer.arm.com/products/software-development-tools/compilers/arm-compiler

	  Support is still experimental.

config TARGET_TOOLCHAIN_XCODE
	bool "macOS Xcode"
	help
	  This is the toolchain for macOS.

	  Support is still experimental.

endchoice

choice
	prompt "Host toolchain"
	default HOST_TOOLCHAIN_CLANG if TARGET_TOOLCHAIN_CLANG
	default HOST_TOOLCHAIN_XCODE if OSX
	default HOST_TOOLCHAIN_GNU
	help
	  A few different compilers are supported. They are classed by
	  toolchain which allows a limited amount of flexibility to
	  accommodate similar compilers.

	  Select the compiler toolchain to be used when compiling for the host.

config HOST_TOOLCHAIN_CLANG
	bool "Clang"
	help
	  Build with Clang toolchain.

	  Linux support is still experimental, and requires the GNU
	  assembler (as) and GNU archiver (ar)

config HOST_TOOLCHAIN_GNU
	bool "GNU"
	help
	  Build with GNU toolchain.

config HOST_TOOLCHAIN_ARMCLANG
	bool "Arm Compiler 6"
	help
	  Build with the Arm Compiler.

config HOST_TOOLCHAIN_XCODE
	bool "macOS Xcode"
	help
	  This is the toolchain for macOS.

	  Support is still experimental.

endchoice

## Target toolchain options

config TARGET_GNU_PREFIX
	string "Target GNU compiler prefix"
	default ""
	help
	  The target triple used to prefix GNU compiler toolchain
	  executables. This will be used when cross compiling for the
	  target system. This is also required by TARGET_TOOLCHAIN_CLANG.

	  If the compiler is not in PATH, TARGET_GNU_PREFIX may be
	  used to provide an absolute path to the compiler.

	  This is expected to end with "/" or "-".

config TARGET_GNU_FLAGS
	string "Target GNU GCC flags"
	default ""
	help
	  GNU toolchain compiler option to select target. This is
	  only used for X86 builds where the compiler supports
	  32 and 64 bit output.

config TARGET_CLANG_TRIPLE
	string "Target Clang triple"
	default "x86_64-linux-gnu"
	depends on TARGET_TOOLCHAIN_CLANG
	help
	  The target triple passed as the -target argument to the Clang
	  compilers. This will be used when cross compiling for the
	  target system.

	  This should not end with "-".

config TARGET_XCODE_TRIPLE
	string "Target Xcode triple"
	depends on TARGET_TOOLCHAIN_XCODE
	default "x86_64-apple-macosx10.11"
	help
	  The target triple passed as the -target argument to the Clang
	  compilers.

source "bob/mconfig/target_toolchain.Mconfig"

## Host toolchain options

source "bob/mconfig/host_toolchain.Mconfig"

## Generic toolchain options
source "bob/mconfig/toolchain.Mconfig"

endmenu

## pkg-config configuration sub-menu

menu "pkg-config configuration"
	depends on ALLOW_HOST_EXPLORE
	help
	  pkg-config is a Linux tool that allows discovery of available
	  libraries. On a standard Linux install pkg-config will be
	  setup correctly for the build host. To use pkg-config for a
	  target system in a cross compile, the package information
	  for the target needs to be available.

config PKG_CONFIG
	bool "Enable use of pkg-config"
	default y if BUILDER_NINJA
	help
	  When enabled, pkg-config is used to retrieve information
	  about the package(s) declared in PKG_CONFIG_PACKAGES.
	  PKG_CONFIG_PACKAGES contains a comma separated list of the packages.
	  For each package, pkg-config will be called to obtain
	  the cflags, linker paths and libraries. These will be assigned
	  to XXX_CFLAGS, XXX_LDFLAGS and XXX_LIBS respectively, where
	  XXX is the uppercase package name with any non alphanumeric letters
	  replaced by '_'.

	  PKG_CONFIG_PATH and PKG_CONFIG_SYSROOT_DIR need to be setup
	  appropriately for pkg-config to use the information for the
	  target system.

	  Where no package information exists the default configuration
	  value will be used.

config PKG_CONFIG_FLAGS
	depends on PKG_CONFIG
	string "pkg-config flags"
	help
	  This field contains command line arguments to pass to pkg-config.

	  This field is specially processed so that the text %MCONFIGDIR% is
	  replaced with the absolute directory that the Mconfig file is in.

	  This should usually be left empty.

config PKG_CONFIG_PACKAGES
	depends on PKG_CONFIG
	string "Packages"
	default "zlib"
	help
	  This field contains a comma separated list of packages.

	  The default value contains packages normally used in the
	  selected configuration.

config PKG_CONFIG_SYSROOT_DIR
	depends on PKG_CONFIG
	string "PKG_CONFIG_SYSROOT_DIR"
	default ""
	help
	  This field allows a path to be assigned to the PKG_CONFIG_SYSROOT_DIR
	  environment variable. See pkg-config man pages for further details of
	  what PKG_CONFIG_SYSROOT_DIR does.

config PKG_CONFIG_PATH
	depends on PKG_CONFIG
	string "PKG_CONFIG_PATH"
	help
	  This field allows a path to be assigned to the PKG_CONFIG_PATH
	  environment variable. See pkg-config man pages for further details of
	  what PKG_CONFIG_PATH does.

	  This field is specially processed so that the text %MCONFIGDIR%
	  is replaced with the absolute directory that the Mconfig file is
	  in. This is to allow a project to point pkg-config at its own
	  pkgconfig files.

# Eg. for a package called 'win-utils' declared in PKG_CONFIG_PACKAGES, the following three
# configuration entries must be present. The defaults will be overridden by pkg-config if
# package information is available.
#
# config WIN_UTILS_CFLAGS
#	string ""
#	default "-I/usr/include"
#
# config WIN_UTILS_LDFLAGS
#	string ""
#	default "-L/usr/lib"
#
# config WIN_UTILS_LIBS
#	string ""
#	default "-lwin-utils"

source "external_libs/Mconfig"

endmenu

## Include this to allow us to test Bob host exploration if needed
config ALLOW_HOST_EXPLORE
	bool
	default y

## DEBUG and NDEBUG used in property testing
config DEBUG
	bool
	default y

config NDEBUG
	bool
	default n if DEBUG

# Have a feature which is always enabled, to test properties inside features
config ALWAYS_ENABLED_FEATURE
	bool
	default y

## TEMPLATE_TEST_VALUE used in template testing
config TEMPLATE_TEST_VALUE
	int
	default 6

## configuration to toggle for static library creation test
config STATIC_LIB_TOGGLE
	bool "Test toggle"
	default n

## GEN_ config needed to do compilation for generator modules
config GEN_CC
	string "Compiler"
	default "$(CLANG) -fuse-ld=lld" if BUILDER_ANDROID_MAKE
	default HOST_CLANG_PREFIX + CLANG_CC_BINARY + " -fuse-ld=lld" if BUILDER_ANDROID_BP
	default HOST_GNU_PREFIX + GNU_CC_BINARY

config GEN_AR
	string "Archiver"
	default HOST_GNU_PREFIX + AR_BINARY

## KERNEL_ config needed for testing kernel modules
config KERNEL_CC
	string "Kernel compiler"
	default "$(CLANG)" if BUILDER_ANDROID_MAKE
	default HOST_CLANG_PREFIX + CLANG_CC_BINARY if BUILDER_ANDROID_BP

config KERNEL_CLANG_TRIPLE
	string "Kernel Clang triple"
	default "x86_64-linux-gnu" if ANDROID
