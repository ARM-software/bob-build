/*
 * Copyright 2023 Arm Limited.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

bob_install_group {
    name: "IG_host_libs",
    builder_android_bp: {
        install_path: "lib",
    },
    builder_ninja: {
        install_path: "install/host/lib",
    },
}

bob_install_group {
    name: "IG_libs",
    builder_android_bp: {
        install_path: "lib",
    },
    builder_ninja: {
        install_path: "install/lib",
    },
}

bob_shared_library {
    name: "libsharedtest",
    srcs: ["srcs/lib.c"],
    cflags: ["-fPIC"],
    host_supported: true,
    target_supported: true,
}

bob_binary {
    name: "utility",
    srcs: ["srcs/main.c"],
    shared_libs: [
        "libsharedtest",
    ],
    host_supported: true,
    target_supported: true,
}

bob_transform_source {
    name: "gen_output",
    srcs: [
        "input/input_one.in",
        "input/input_two.in",
    ],
    out: {
        match: ".*/([^/]+)\\.(in)",
        replace: ["$1.gen"],
    },
    host_bin: "utility",
    cmd: "${tool} -u ${host_bin} -i ${in} -o ${out}",
    tools: ["transform.py"],
    target: "host",
}

bob_shared_library {
    name: "libsharedtest_installed",
    srcs: ["lib.c"],
    cflags: ["-DFUNC_NAME=sharedtest_installed"],
    host: {
        install_group: "IG_host_libs",
    },
    target: {
        install_group: "IG_libs",
    },
    host_supported: true,
    target_supported: true,
}

bob_shared_library {
    name: "libsharedtest_not_installed",
    srcs: ["lib.c"],
    cflags: ["-DFUNC_NAME=sharedtest_not_installed"],
    host_supported: true,
    target_supported: true,
}

// Test that we can link to a shared library, whether it has an install group
// or not.
bob_binary {
    name: "sharedtest",
    srcs: ["main.c"],
    shared_libs: [
        "libsharedtest_installed",
        "libsharedtest_not_installed",
    ],
    host_supported: true,
    target_supported: true,
}

// Ensure that the host version of `sharedtest` is actually built, and that it
// can be run successfully, which checks there are no library path issues.
bob_generate_source {
    name: "use_sharedtest_host",
    host_bin: "sharedtest:host",
    cmd: "${host_bin} ${out}",
    out: ["use_sharedtest_host_main.c"],
}

bob_binary {
    name: "use_sharedtest_host_gen_source",
    generated_sources: ["use_sharedtest_host"],
}

bob_shared_library {
    name: "libstripped_library",
    srcs: ["lib.c"],
    cflags: ["-DFUNC_NAME=func"],
    strip: true,
    host: {
        install_group: "IG_host_libs",
    },
    target: {
        install_group: "IG_libs",
    },
}

bob_binary {
    name: "stripped_binary",
    srcs: ["lib.c"],
    cflags: ["-DFUNC_NAME=main"],
    shared_libs: ["libstripped_library"],
    strip: true,
    host: {
        install_group: "IG_host_binaries",
    },
    target: {
        install_group: "IG_binaries",
    },
}

bob_install_group {
    name: "IG_host_binaries",
    builder_android_bp: {
        install_path: "bin",
    },
    builder_ninja: {
        install_path: "install/host/bin",
    },
}

bob_install_group {
    name: "IG_binaries",
    builder_android_bp: {
        install_path: "bin",
    },
    builder_ninja: {
        install_path: "install/bin",
    },
}

bob_defaults {
    name: "shared_code",
    cflags: ["-fPIC"],
}

bob_static_library {
    name: "sl_liba",
    defaults: ["shared_code"],
    srcs: [
        "a.c",
    ],
    export_cflags: ["-DFOO=1"],
}

bob_static_library {
    name: "sl_libb_whole_inclusion",
    defaults: ["shared_code"],
    srcs: ["b.c"],

    // b.c and b2.c contain the same code. Compile different object
    // based on configuration. After switching configurations the archive
    // should only ever have one of the objects. This checks archive
    // creation from archives and objects (calls to whole_static.py).
    static_lib_toggle: {
        srcs: ["b2.c"],
        exclude_srcs: ["b.c"],
    },
    whole_static_libs: ["sl_liba"],
}

bob_static_library {
    name: "sl_libb",
    defaults: ["shared_code"],
    srcs: ["b.c"],

    // b.c and b2.c contain the same code. Compile different object
    // based on configuration. After switching configurations the archive
    // should only ever have one of the objects. This checks archive
    // creation from objects (direct calls to ar).
    static_lib_toggle: {
        srcs: ["b2.c"],
        exclude_srcs: ["b.c"],
    },
    // Must define FOO for the a.h include
    cflags: ["-DFOO=1"],
}

bob_shared_library {
    name: "sl_libb_whole_shared",

    // Include sl_libb_whole_inclusion as a whole archive in this
    // shared library. If there are duplicate symbols in the static
    // archive from b.c and b2.c, this link will fail.
    whole_static_libs: ["sl_libb_whole_inclusion"],
    not_osx: {
        ldflags: ["-Wl,--no-undefined"],
    },
}

bob_shared_library {
    name: "sl_libb_shared",

    // Include sl_libb as a whole archive in this shared library. If
    // there are duplicate symbols in the static archive from b.c and
    // b2.c, this link will fail.
    whole_static_libs: ["sl_libb"],
    static_libs: ["sl_liba"],
    not_osx: {
        ldflags: ["-Wl,--no-undefined"],
    },
}

bob_binary {
    name: "sl_main_whole",
    srcs: ["main.c"],
    static_libs: ["sl_libb_whole_inclusion"],
}

bob_static_library {
    name: "sl_libb_export_static",
    srcs: ["b.c"],
    static_libs: ["sl_liba"],
}

bob_binary {
    name: "sl_main_export_static",
    srcs: ["main.c"],
    static_libs: ["sl_libb_export_static"],
}

// Simple check that library orderring within a static lib is preserved
bob_binary {
    name: "sl_main_ordered",
    srcs: ["main.c"],
    static_libs: [
        "sl_libb",
        "sl_liba",
    ],
}

// Check that library orderring is preserved when you have multiple
// dependencies on the same library. Attempt to setup the test so that
// multiple dependency orders are checked
//
//       main
//     /     \
//    c       d
//  /   \   /   \
// e     f g     h
//      /       /
//     g       e
//
bob_static_library {
    name: "sl_libc",
    srcs: ["call_two_functions.c"],
    cflags: [
        "-DFUNCTION=do_c",
        "-DCALL1=do_e1",
        "-DCALL2=do_f",
    ],
    static_libs: [
        "sl_libe",
        "sl_libf",
    ],
}

bob_static_library {
    name: "sl_libd",
    srcs: ["call_two_functions.c"],
    cflags: [
        "-DFUNCTION=do_d",
        "-DCALL1=do_g1",
        "-DCALL2=do_h",
    ],
    static_libs: [
        "sl_libg",
        "sl_libh",
    ],
}

bob_static_library {
    name: "sl_libf",
    srcs: ["call_one_function.c"],
    cflags: [
        "-DFUNCTION=do_f",
        "-DCALL=do_g2",
    ],
    static_libs: ["sl_libg"],
}

bob_static_library {
    name: "sl_libh",
    srcs: ["call_one_function.c"],
    cflags: [
        "-DFUNCTION=do_h",
        "-DCALL=do_e2",
    ],
    static_libs: ["sl_libe"],
}

bob_static_library {
    name: "sl_libe",
    srcs: ["call_no_functions.c"],
    cflags: [
        "-DFUNCTION=do_e",
    ],
}

bob_static_library {
    name: "sl_libg",
    srcs: ["call_no_functions.c"],
    cflags: [
        "-DFUNCTION=do_g",
    ],
}

bob_binary {
    name: "sl_main_dd",
    srcs: ["main2.c"],
    static_libs: [
        "sl_libc",
        "sl_libd",
    ],

    // The linker actually isn't complaining when the link order is
    // incorrect, so use a custom build wrapper to check that the static
    // libraries are in a good order.
    build_wrapper: "static_libs/check_link_order.py",

    android: {
        enabled: false,
    },
}

// Check that static libraries can contain multiple objects with the same
// basename on Linux and Android
bob_static_library {
    name: "sl_liba_duplicates",
    srcs: [
        "a/a.c",
        "a.c",
    ],
    cflags: ["-DFOO=1"],
}

bob_static_library {
    name: "sl_liba_duplicates_2",
    whole_static_libs: ["sl_liba_duplicates"],
}

bob_binary {
    name: "sl_main_duplicates",
    srcs: ["main3.c"],
    static_libs: ["sl_liba_duplicates_2"],
    cflags: ["-DFOO=1"],
    osx: {
        enabled: false,
    },
}

// Very strong interopability test
bob_static_library {
    name: "lib_transitive_define",
    static_libs: ["lib_forward_defines"],
    host_supported: true,
    target_supported: false,
    build_by_default: true,
}

bob_binary {
    name: "strict_lib_binary_with_transitive_define",
    srcs: [":static_bin_srcs"],
    static_libs: ["lib_transitive_define"],
    host_supported: true,
    target_supported: false,
    build_by_default: true,
}

bob_library {
    name: "lib_forward_defines",
    srcs: ["src/libs/lib.cpp"],
    hdrs: ["src/libs/lib.h"],
    local_defines: ["LOCAL_DEFINE"],
    defines: ["FORWARDED_DEFINE"],
}

bob_library {
    name: "lib_dep",
    deps: ["lib_forward_defines"],
    host_supported: true,
    target_supported: false,
    build_by_default: true,
}

bob_binary {
    name: "strict_lib_binary_with_forward_define",
    srcs: [":static_bin_srcs"],
    static_libs: ["lib_forward_defines"],
    host_supported: true,
    target_supported: false,
    build_by_default: true,
}

bob_binary {
    name: "strict_lib_binary_with_dep",
    srcs: [":static_bin_srcs"],
    static_libs: ["lib_dep"],
    host_supported: true,
    target_supported: false,
    build_by_default: true,
}

bob_static_library {
    name: "bob_test_local_libpublic",
    export_local_system_include_dirs: [
        "public",
    ],
    local_include_dirs: [
        "include",
    ],
    srcs: ["src/bob_test_public_impl.c"],

    // Warning is issued only when building this target.
    cflags: ["-Wconversion"],

    builder_android_bp: {
        /* AOSP builds with Werror */
        cflags: ["-Wno-error"],
    },
}

bob_static_library {
    name: "bob_test_local_libconsumer",
    whole_static_libs: ["bob_test_local_libpublic"],
    srcs: ["src/bob_test_consumer.c"],
    cflags: [
        "-Wconversion",
        "-Werror",
    ],
}

bob_binary {
    name: "bob_test_local_consumer",
    static_libs: ["bob_test_local_libpublic"],
    srcs: ["src/bob_test_consumer.c"],
    cflags: [
        "-Wconversion",
        "-Werror",
    ],
}

bob_static_library {
    name: "libonly_works_on_target",
    srcs: ["fail_when_FAIL_is_1.c"],
    host_supported: true,
    target_supported: true,
    host: {
        cflags: ["-DFAIL=1"],
    },
    target: {
        cflags: ["-DFAIL=0"],
    },
}

bob_static_library {
    name: "libuses_target_specific_link",
    srcs: ["dummy.c"],
    host_supported: true,
    target_supported: true,
    target: {
        static_libs: ["libonly_works_on_target"],
    },
}

bob_binary {
    name: "bob_test_target_specific_link",
    srcs: ["main.c"],
    static_libs: ["libuses_target_specific_link"],
    host_supported: true,
    target_supported: true,
    build_by_default: true,
}
