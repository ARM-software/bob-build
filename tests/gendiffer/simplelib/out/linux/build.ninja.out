# ******************************************************************************
# ***            This file is generated and should not be edited             ***
# ******************************************************************************
#
# This file contains variables, rules, and pools with name prefixes indicating
# they were generated by the following Go packages:
#
#     bob       [from Go package bob]
#     bootstrap [from Go package github.com/google/blueprint/bootstrap]
#
ninja_required_version = 1.7.0

g.bob.BuildDir = redacted

g.bob.SrcDir = redacted

g.bootstrap.BinDir = redacted/.bootstrap/bin

g.bootstrap.buildDir = redacted

g.bootstrap.ninjaBuildDir = redacted

g.bootstrap.srcDir = redacted

# Limit the parallelization of linking, which is memory intensive
pool g.bob.link
    depth = 1

builddir = ${g.bootstrap.ninjaBuildDir}

rule g.bob.as
    command = ${build_wrapper} ${ascompiler} ${asflags} ${in} -MD ${depfile} -o ${out}
    depfile = ${out}.d
    deps = gcc
    description = ${out}

rule g.bob.cc
    command = ${build_wrapper} ${ccompiler} -c ${cflags} ${conlyflags} -MD -MF ${depfile} ${in} -o ${out}
    depfile = ${out}.d
    deps = gcc
    description = ${out}

rule g.bob.cxx
    command = ${build_wrapper} ${cxxcompiler} -c ${cflags} ${cxxflags} -MD -MF ${depfile} ${in} -o ${out}
    depfile = ${out}.d
    deps = gcc
    description = ${out}

rule g.bob.executable
    pool = g.bob.link
    command = ${build_wrapper} ${linker} ${in} -o ${out} ${ldflags} ${static_libs} -L${shared_libs_dir} ${shared_libs_flags} ${ldlibs}
    description = ${out}

rule g.bob.static_library
    command = rm -f ${out} && ${build_wrapper} ${ar} -rcs ${out} ${in}
    description = ${out}

rule g.bootstrap.cp
    command = cp ${in} ${out}
    description = cp ${out}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  bin_consumer
# Variant: target
# Type:    bob_binary
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:95:1

m.bin_consumer_target.asflags = -DASFLAGS_BIN
m.bin_consumer_target.cflags = -DCFLAGS_BIN -DCFLAGS_PROVIDER_EXPORT -isystem ${g.bob.SrcDir}/export/local/system/include/lib/provider -isystem ${g.bob.SrcDir}/export/local/system/include/lib/consumer -I${g.bob.SrcDir}/local/include/bin/consumer -Iinclude/bin/consumer -I${g.bob.SrcDir}/export/local/include/lib/provider -I${g.bob.SrcDir}/export/local/include/lib/consumer
m.bin_consumer_target.conlyflags = -DCONLYFLAGS_BIN
m.bin_consumer_target.cxxflags = -DCXXFLAGS_BIN

build ${g.bob.BuildDir}/target/objects/bin_consumer/src/bin_consumer.c.o: $
        g.bob.cc ${g.bob.SrcDir}/src/bin_consumer.c
    build_wrapper = 
    ccompiler = gcc
    cflags = ${m.bin_consumer_target.cflags}
    conlyflags = ${m.bin_consumer_target.conlyflags}

build ${g.bob.BuildDir}/target/objects/bin_consumer/src/bin_consumer.s.o: $
        g.bob.as ${g.bob.SrcDir}/src/bin_consumer.s
    ascompiler = as
    asflags = ${m.bin_consumer_target.asflags}
    build_wrapper = 

build ${g.bob.BuildDir}/target/objects/bin_consumer/src/bin_consumer.cpp.o: $
        g.bob.cxx ${g.bob.SrcDir}/src/bin_consumer.cpp
    build_wrapper = 
    cflags = ${m.bin_consumer_target.cflags}
    cxxcompiler = g++
    cxxflags = ${m.bin_consumer_target.cxxflags}

build ${g.bob.BuildDir}/target/executable/bin_consumer: g.bob.executable $
        ${g.bob.BuildDir}/target/objects/bin_consumer/src/bin_consumer.c.o $
        ${g.bob.BuildDir}/target/objects/bin_consumer/src/bin_consumer.s.o $
        ${g.bob.BuildDir}/target/objects/bin_consumer/src/bin_consumer.cpp.o | $
        ${g.bob.BuildDir}/target/static/lib_consumer.a $
        ${g.bob.BuildDir}/target/static/lib_provider.a
    build_wrapper = 
    ldflags = -O3 -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/target/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/target/shared
    static_libs = ${g.bob.BuildDir}/target/static/lib_consumer.a ${g.bob.BuildDir}/target/static/lib_provider.a

build bin_consumer: phony ${g.bob.BuildDir}/target/executable/bin_consumer
default bin_consumer

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  lib_consumer
# Variant: target
# Type:    bob_static_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:57:1

m.lib_consumer_target.asflags = -DASFLAGS_LIB
m.lib_consumer_target.cflags = -DCFLAGS_LIB -DCFLAGS_PROVIDER_EXPORT -isystem ${g.bob.SrcDir}/export/local/system/include/lib/provider -I${g.bob.SrcDir}/local/include/lib/consumer -I${g.bob.SrcDir}/export/local/include/lib/consumer -I${g.bob.SrcDir}/export/local/system/include/lib/consumer -Iinclude/lib/consumer -I${g.bob.SrcDir}/export/local/include/lib/provider
m.lib_consumer_target.conlyflags = -DCONLYFLAGS_LIB
m.lib_consumer_target.cxxflags = -DCXXFLAGS_LIB

build ${g.bob.BuildDir}/target/objects/lib_consumer/src/lib_consumer.c.o: $
        g.bob.cc ${g.bob.SrcDir}/src/lib_consumer.c
    build_wrapper = 
    ccompiler = gcc
    cflags = ${m.lib_consumer_target.cflags}
    conlyflags = ${m.lib_consumer_target.conlyflags}

build ${g.bob.BuildDir}/target/objects/lib_consumer/src/lib_consumer.s.o: $
        g.bob.as ${g.bob.SrcDir}/src/lib_consumer.s
    ascompiler = as
    asflags = ${m.lib_consumer_target.asflags}
    build_wrapper = 

build ${g.bob.BuildDir}/target/objects/lib_consumer/src/lib_consumer.cpp.o: $
        g.bob.cxx ${g.bob.SrcDir}/src/lib_consumer.cpp
    build_wrapper = 
    cflags = ${m.lib_consumer_target.cflags}
    cxxcompiler = g++
    cxxflags = ${m.lib_consumer_target.cxxflags}

build ${g.bob.BuildDir}/target/static/lib_consumer.a: g.bob.static_library $
        ${g.bob.BuildDir}/target/objects/lib_consumer/src/lib_consumer.c.o $
        ${g.bob.BuildDir}/target/objects/lib_consumer/src/lib_consumer.s.o $
        ${g.bob.BuildDir}/target/objects/lib_consumer/src/lib_consumer.cpp.o
    ar = ar
    build_wrapper = 

build lib_consumer: phony ${g.bob.BuildDir}/target/static/lib_consumer.a

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  lib_provider
# Variant: target
# Type:    bob_static_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:18:1

m.lib_provider_target.asflags = -DASFLAGS_PROVIDER_LIB
m.lib_provider_target.cflags = -DCFLAGS_PROVIDER_LIB -DCFLAGS_PROVIDER_EXPORT -I${g.bob.SrcDir}/local/include/lib/provider -I${g.bob.SrcDir}/export/local/include/lib/provider -I${g.bob.SrcDir}/export/local/system/include/lib/provider -Iinclude/lib/provider
m.lib_provider_target.conlyflags = -DCONLYFLAGS_PROVIDER_LIB
m.lib_provider_target.cxxflags = -DCXXFLAGS_PROVIDER_LIB

build ${g.bob.BuildDir}/target/objects/lib_provider/src/lib_provider.c.o: $
        g.bob.cc ${g.bob.SrcDir}/src/lib_provider.c
    build_wrapper = 
    ccompiler = gcc
    cflags = ${m.lib_provider_target.cflags}
    conlyflags = ${m.lib_provider_target.conlyflags}

build ${g.bob.BuildDir}/target/objects/lib_provider/src/lib_provider.s.o: $
        g.bob.as ${g.bob.SrcDir}/src/lib_provider.s
    ascompiler = as
    asflags = ${m.lib_provider_target.asflags}
    build_wrapper = 

build ${g.bob.BuildDir}/target/objects/lib_provider/src/lib_provider.cpp.o: $
        g.bob.cxx ${g.bob.SrcDir}/src/lib_provider.cpp
    build_wrapper = 
    cflags = ${m.lib_provider_target.cflags}
    cxxcompiler = g++
    cxxflags = ${m.lib_provider_target.cxxflags}

build ${g.bob.BuildDir}/target/static/lib_provider.a: g.bob.static_library $
        ${g.bob.BuildDir}/target/objects/lib_provider/src/lib_provider.c.o $
        ${g.bob.BuildDir}/target/objects/lib_provider/src/lib_provider.s.o $
        ${g.bob.BuildDir}/target/objects/lib_provider/src/lib_provider.cpp.o
    ar = ar
    build_wrapper = 

build lib_provider: phony ${g.bob.BuildDir}/target/static/lib_provider.a

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Singleton: bootstrap
# Factory:   github.com/google/blueprint/bootstrap.Main.func4

rule s.bootstrap.bigbpDocs
    command = ${g.bootstrap.BinDir}/minibp -p -l redacted/bplist -b ${g.bootstrap.buildDir} --docs ${out} ${g.bootstrap.srcDir}/build.bp
    description = minibp docs ${out}

build ${g.bootstrap.buildDir}/bin/minibp: g.bootstrap.cp $
        ${g.bootstrap.BinDir}/minibp
default ${g.bootstrap.buildDir}/bin/minibp

build ${g.bootstrap.buildDir}/.primary/docs/minibp.html: s.bootstrap.bigbpDocs $
        | ${g.bootstrap.BinDir}/minibp
default ${g.bootstrap.buildDir}/.primary/docs/minibp.html

build blueprint_docs: phony ${g.bootstrap.buildDir}/.primary/docs/minibp.html
default blueprint_docs

build blueprint_tools: phony
default blueprint_tools

