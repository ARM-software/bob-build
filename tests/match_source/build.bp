// Test that we can refer to specific files in the srcs list of a
// bob_generate_source via {{match_srcs}}
//
// This concatentates 2 files to produce a C file which is only valid
// if both parts are present.
bob_generate_source {
    name: "match_source_gen",
    srcs: [
        "main.c",
        "function_def.txt",
    ],
    out: ["gen_main.c"],
    cmd: "cat {{match_srcs \"function_def.txt\"}} {{match_srcs \"main.c\"}} > ${out}",
}

// Test that we can refer to specific files in the srcs list of a
// bob_binary via {{match_srcs}}. The test case is to pass a filename
// to the compiler and the linker.
//
// Also compile the output of match_source_gen, which checks that it
// worked as expected.
bob_binary {
    name: "match_source_bin",
    srcs: [
        "source.c",
        "test_cpp.cpp",
        "cflags.h",
        "conlyflags.h",
        "cxxflags.h",
    ],
    generated_sources: ["match_source_gen"],
    not_osx: {
        srcs: ["exports.txt"],
        ldflags: ["-Wl,--dynamic-list,{{match_srcs \"*.txt\"}}"],
    },
    osx: {
        srcs: ["order_file.txt"],
        ldflags: ["-Wl,-order_file,{{match_srcs \"*.txt\"}}"],
    },
    cflags: ["-include {{match_srcs \"cflags.h\"}}"],
    conlyflags: ["-include {{match_srcs \"conlyflags.h\"}}"],
    cxxflags: ["-include {{match_srcs \"cxxflags.h\"}}"],
}

bob_alias {
    name: "bob_test_match_source",
    srcs: [
        "match_source_bin",
    ],
}
