# This is an example configuration database containing the minimal set
# of configuration options required by Bob.

choice
	prompt "OS"
	default LINUX

config LINUX
	bool "Linux"

config ANDROID
	bool "Android"

endchoice

## Need to select the BUILDER_ for Bob
choice
	prompt "Builder"
	default BUILDER_ANDROID if ANDROID
	default BUILDER_LINUX

config BUILDER_LINUX
	bool "Linux"

config BUILDER_ANDROID
	bool "Android"

endchoice

## Select toolchain for Bob
choice
	prompt "Target toolchain"
	default TARGET_TOOLCHAIN_CLANG if ANDROID
	default TARGET_TOOLCHAIN_GNU

config TARGET_TOOLCHAIN_GNU
	bool "GNU"

config TARGET_TOOLCHAIN_CLANG
	bool "Clang"

config TARGET_TOOLCHAIN_ARMCLANG
	bool "Arm Compiler 6"

endchoice

## Toolchain prefix needed for Bob (for gcc)
config TARGET_GNU_TOOLCHAIN_PREFIX
	string
	default ""

config TARGET_GNU_FLAGS
	string
	default ""

config TARGET_CLANG_TRIPLE
	string
	default "x86_64-linux-gnu"

# Update this to reflect the path to Bob within the superproject
source "bob-build/mconfig/toolchain.Mconfig"

config PKG_CONFIG
	bool "Enable use of pkg-config"
	help
	  When enabled, pkg-config is used to retrieve information
	  about the package(s) declared in PKG_CONFIG_PACKAGES.
	  PKG_CONFIG_PACKAGES contains a comma separated list of the packages.
	  For each package, pkg-config will be called to obtain
	  the cflags, linker paths and libraries. These will be assigned
	  to XXX_CFLAGS, XXX_LDFLAGS and XXX_LIBS respectively, where
	  XXX is the uppercase package name with any non alphanumeric letters
	  replaced by '_'.

	  PKG_CONFIG_PATH and PKG_CONFIG_SYSROOT_DIR need to be setup
	  appropriately for pkg-config to use the information for the
	  target system.

	  Where no package information exists the default configuration
	  value will be used.

## Include this if you expect to call scripts/host_explore
config ALLOW_HOST_EXPLORE
	bool
	default y

choice
	prompt "Host toolchain"
	default HOST_TOOLCHAIN_CLANG if TARGET_TOOLCHAIN_CLANG
	default HOST_TOOLCHAIN_GNU
	help
	  A few different compilers are supported. They are classed by
	  toolchain which allows a limited amount of flexibility to
	  accommodate similar compilers.

	  Select the compiler toolchain to be used when compiling for the host.

config HOST_TOOLCHAIN_CLANG
	bool "Clang"
	help
	  Build with Clang toolchain.

	  Linux support is still experimental, and requires the GNU
	  assembler (as) and GNU archiver (ar)

config HOST_TOOLCHAIN_GNU
	bool "GNU"
	help
	  Build with GNU toolchain.

config HOST_TOOLCHAIN_ARMCLANG
	bool "Arm Compiler 6"
	help
	  Build with the Arm Compiler.

endchoice

config HOST_STL_LIBRARY
	string "Host STL implementation"
	default ""
	help
	  This is the C++ Standard Template Library being linked against,
	  without the `lib` prefix, e.g. `stdc++` for `libstdc++`, or
	  `c++` for `libc++`. Specifying it here allows it to be added to
	  the library's run-time lookup path, in case the toolchain is
	  installed in a non-standard location.

config TARGET_STL_LIBRARY
	string "Target STL implementation"
	default ""
	help
	  This is the C++ Standard Template Library being linked against,
	  without the `lib` prefix, e.g. `stdc++` for `libstdc++`, or
	  `c++` for `libc++`. Specifying it here allows it to be added to
	  the library's run-time lookup path, in case the toolchain is
	  installed in a non-standard location.
