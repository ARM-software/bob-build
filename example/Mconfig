# This is an example configuration database containing the minimal set
# of configuration options required by Bob.

# Update this to reflect the path to Bob within the superproject
source "bob-build/mconfig/basics.Mconfig"

menu "Toolchain Options"

## Select toolchain for Bob
choice
	prompt "Target toolchain"
	default TARGET_TOOLCHAIN_CLANG if ANDROID
	default TARGET_TOOLCHAIN_XCODE if OSX
	default TARGET_TOOLCHAIN_GNU
	help
	  A few different compilers are supported. They are classed by
	  toolchain which allows a limited amount of flexibility to
	  accommodate similar compilers.

	  Select the compiler toolchain to be used when compiling for the target.

config TARGET_TOOLCHAIN_GNU
	bool "GNU"
	help
	  Build with GNU toolchain.

config TARGET_TOOLCHAIN_CLANG
	bool "Clang"
	help
	  Build with Clang toolchain.

	  Linux support is still experimental, and requires the GNU
	  assembler (as) and GNU archiver (ar)

config TARGET_TOOLCHAIN_ARMCLANG
	bool "Arm Compiler 6"
	help
	  This is the toolchain at https://developer.arm.com/products/software-development-tools/compilers/arm-compiler

	  Support is still experimental.

config TARGET_TOOLCHAIN_XCODE
	bool "Xcode"
	help
	  Toolchain for macOS.

	  Support is still experimental.

endchoice

config CUSTOM_TOOLCHAIN
	bool

choice
	prompt "Host toolchain"
	default HOST_TOOLCHAIN_CLANG if TARGET_TOOLCHAIN_CLANG
	default HOST_TOOLCHAIN_XCODE if TARGET_TOOLCHAIN_XCODE
	default HOST_TOOLCHAIN_GNU
	help
	  A few different compilers are supported. They are classed by
	  toolchain which allows a limited amount of flexibility to
	  accommodate similar compilers.

	  Select the compiler toolchain to be used when compiling for the host.

config HOST_TOOLCHAIN_CLANG
	bool "Clang"
	help
	  Build with Clang toolchain.

	  Linux support is still experimental, and requires the GNU
	  assembler (as) and GNU archiver (ar)

config HOST_TOOLCHAIN_GNU
	bool "GNU"
	help
	  Build with GNU toolchain.

config HOST_TOOLCHAIN_ARMCLANG
	bool "Arm Compiler 6"
	help
	  Build with the Arm Compiler.

config HOST_TOOLCHAIN_XCODE
	bool "Xcode"
	help
	  Build with the Xcode.

endchoice

## Target toolchain options

config TARGET_GNU_PREFIX
	string "Target GNU compiler prefix"
	default ""
	help
	  The target triple used to prefix GNU compiler toolchain
	  executables. This will be used when cross compiling for the
	  target system. This is also required by TARGET_TOOLCHAIN_CLANG.

	  If the compiler is not in PATH, TARGET_GNU_PREFIX may be
	  used to provide an absolute path to the compiler.

	  This is expected to end with "/" or "-".

config TARGET_GNU_FLAGS
	string "Target GNU GCC flags"
	default ""
	help
	  GNU toolchain compiler option to select target. This is
	  only used for X86 builds where the compiler supports
	  32 and 64 bit output.

config TARGET_CLANG_TRIPLE
	string "Target Clang triple"
	default "x86_64-linux-gnu"
	depends on TARGET_TOOLCHAIN_CLANG
	help
	  The target triple passed as the -target argument to the Clang
	  compilers. This will be used when cross compiling for the
	  target system.

	  This should not end with "-".

config TARGET_XCODE_TRIPLE
	string "Target Xcode triple"
	depends on TARGET_TOOLCHAIN_XCODE
	default "x86_64-apple-macosx10.11"
	help
	  The target triple passed as the -target argument to the
	  compilers. For macOS, it can set minimum required OS
	  version.

# Update this to reflect the path to Bob within the superproject
source "bob-build/mconfig/target_toolchain.Mconfig"

config TARGET_STL_LIBRARY
	string "Target STL implementation"
	default ""
	help
	  This is the C++ Standard Template Library being linked against,
	  without the `lib` prefix, e.g. `stdc++` for `libstdc++`, or
	  `c++` for `libc++`. Specifying it here allows it to be added to
	  the library's run-time lookup path, in case the toolchain is
	  installed in a non-standard location.

## Host toolchain options

# Update this to reflect the path to Bob within the superproject
source "bob-build/mconfig/host_toolchain.Mconfig"

config HOST_STL_LIBRARY
	string "Host STL implementation"
	default ""
	help
	  This is the C++ Standard Template Library being linked against,
	  without the `lib` prefix, e.g. `stdc++` for `libstdc++`, or
	  `c++` for `libc++`. Specifying it here allows it to be added to
	  the library's run-time lookup path, in case the toolchain is
	  installed in a non-standard location.

## Generic toolchain options
# Update this to reflect the path to Bob within the superproject
source "bob-build/mconfig/toolchain.Mconfig"

endmenu

config PKG_CONFIG
	bool "Enable use of pkg-config"
	help
	  When enabled, pkg-config is used to retrieve information
	  about the package(s) declared in PKG_CONFIG_PACKAGES.
	  PKG_CONFIG_PACKAGES contains a comma separated list of the packages.
	  For each package, pkg-config will be called to obtain
	  the cflags, linker paths and libraries. These will be assigned
	  to XXX_CFLAGS, XXX_LDFLAGS and XXX_LIBS respectively, where
	  XXX is the uppercase package name with any non alphanumeric letters
	  replaced by '_'.

	  PKG_CONFIG_PATH and PKG_CONFIG_SYSROOT_DIR need to be setup
	  appropriately for pkg-config to use the information for the
	  target system.

	  Where no package information exists the default configuration
	  value will be used.

## Include this if you expect to call scripts/host_explore
config ALLOW_HOST_EXPLORE
	bool
	default y
