From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CJ Winslow <whoaa512@gmail.com>
Date: Sun, 2 Jul 2023 12:21:33 -0700
Subject: Expose the MergeList & MergeDict helpers

To avoid users having to recreate the logic

diff --git a/rule/merge.go b/rule/merge.go
index bdf7a55..71ecad6 100644
--- a/rule/merge.go
+++ b/rule/merge.go
@@ -142,20 +142,38 @@ func mergeAttrValues(srcAttr, dstAttr *attrValue) (bzl.Expr, error) {
 func mergePlatformStringsExprs(src, dst platformStringsExprs) (platformStringsExprs, error) {
 	var ps platformStringsExprs
 	var err error
-	ps.generic = mergeList(src.generic, dst.generic)
-	if ps.os, err = mergeDict(src.os, dst.os); err != nil {
+	ps.generic = MergeList(src.generic, dst.generic)
+	if ps.os, err = MergeDict(src.os, dst.os); err != nil {
 		return platformStringsExprs{}, err
 	}
-	if ps.arch, err = mergeDict(src.arch, dst.arch); err != nil {
+	if ps.arch, err = MergeDict(src.arch, dst.arch); err != nil {
 		return platformStringsExprs{}, err
 	}
-	if ps.platform, err = mergeDict(src.platform, dst.platform); err != nil {
+	if ps.platform, err = MergeDict(src.platform, dst.platform); err != nil {
 		return platformStringsExprs{}, err
 	}
 	return ps, nil
 }
 
-func mergeList(src, dst *bzl.ListExpr) *bzl.ListExpr {
+// MergeList merges two bzl.ListExpr of strings. The lists are merged in the
+// following way:
+//
+//   - If a string appears in both lists, it appears in the result.
+//   - If a string appears in only src list, it appears in the result.
+//   - If a string appears in only dst list, it is dropped from the result.
+//   - If a string appears in neither list, it is dropped from the result.
+//
+// The result is nil if both lists are nil or empty.
+//
+// If the result is non-nil, it will have ForceMultiLine set if either of the
+// input lists has ForceMultiLine set or if any of the strings in the result
+// have a "# keep" comment.
+func MergeList(srcExpr, dstExpr bzl.Expr) *bzl.ListExpr {
+	src, isSrcLis := srcExpr.(*bzl.ListExpr)
+	dst, isDstLis := dstExpr.(*bzl.ListExpr)
+	if !isSrcLis && !isDstLis {
+		return nil
+	}
 	if dst == nil {
 		return src
 	}
@@ -204,7 +222,19 @@ func mergeList(src, dst *bzl.ListExpr) *bzl.ListExpr {
 	}
 }
 
-func mergeDict(src, dst *bzl.DictExpr) (*bzl.DictExpr, error) {
+// MergeDict merges two bzl.DictExpr, src and dst, where the keys are strings
+// and the values are lists of strings.
+//
+// If both src and dst are non-nil, the keys in src are merged into dst. If both
+// src and dst have the same key, the values are merged using MergeList.
+// If the same key is present in both src and dst, and the values are not compatible,
+// an error is returned.
+func MergeDict(srcExpr, dstExpr bzl.Expr) (*bzl.DictExpr, error) {
+	src, isSrcDict := srcExpr.(*bzl.DictExpr)
+	dst, isDstDict := dstExpr.(*bzl.DictExpr)
+	if !isSrcDict && !isDstDict {
+		return nil, fmt.Errorf("expected dict, got %s and %s", srcExpr, dstExpr)
+	}
 	if dst == nil {
 		return src, nil
 	}
@@ -245,7 +275,7 @@ func mergeDict(src, dst *bzl.DictExpr) (*bzl.DictExpr, error) {
 	keys := make([]string, 0, len(entries))
 	haveDefault := false
 	for _, e := range entries {
-		e.mergedValue = mergeList(e.srcValue, e.dstValue)
+		e.mergedValue = MergeList(e.srcValue, e.dstValue)
 		if e.key == "//conditions:default" {
 			// Keep the default case, even if it's empty.
 			haveDefault = true
diff --git a/rule/value.go b/rule/value.go
index c8eb532..0c9bcf3 100644
--- a/rule/value.go
+++ b/rule/value.go
@@ -69,7 +69,7 @@ func (s SortedStrings) Merge(other bzl.Expr) bzl.Expr {
 	if other == nil {
 		return s.BzlExpr()
 	}
-	merged := mergeList(s.BzlExpr().(*bzl.ListExpr), other.(*bzl.ListExpr))
+	merged := MergeList(s.BzlExpr(), other)
 	sortExprLabels(merged, []bzl.Expr{})
 	return merged
 }
@@ -80,7 +80,7 @@ func (s UnsortedStrings) Merge(other bzl.Expr) bzl.Expr {
 	if other == nil {
 		return ExprFromValue(s)
 	}
-	return mergeList(ExprFromValue(s).(*bzl.ListExpr), other.(*bzl.ListExpr))
+	return MergeList(ExprFromValue(s), other)
 }
 
 // SelectStringListValue is a value that can be translated to a Bazel
-- 
2.25.1

