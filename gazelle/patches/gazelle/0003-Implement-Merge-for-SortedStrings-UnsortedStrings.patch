From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CJ Winslow <whoaa512@gmail.com>
Date: Sun, 2 Jul 2023 00:34:05 -0700
Subject: Implement Merge for SortedStrings & UnsortedStrings


diff --git a/rule/merge_test.go b/rule/merge_test.go
index 768b465..6718d90 100644
--- a/rule/merge_test.go
+++ b/rule/merge_test.go
@@ -19,6 +19,7 @@ import (
 	"testing"
 
 	"github.com/bazelbuild/bazel-gazelle/rule"
+	bzl "github.com/bazelbuild/buildtools/build"
 )
 
 func TestMergeRules(t *testing.T) {
@@ -35,3 +36,114 @@ func TestMergeRules(t *testing.T) {
 		}
 	})
 }
+
+func TestMergeRules_WithSortedStringAttr(t *testing.T) {
+	t.Run("sorted string attributes are merged to empty rule", func(t *testing.T) {
+		src := rule.NewRule("go_library", "go_default_library")
+		sortedStringAttrKey := "deps"
+		sortedStringAttrVal := rule.SortedStrings{"@qux", "//foo:bar", "//foo:baz"}
+		src.SetAttr(sortedStringAttrKey, sortedStringAttrVal)
+		dst := rule.NewRule("go_library", "go_default_library")
+		rule.MergeRules(src, dst, map[string]bool{}, "")
+
+		valExpr, ok := dst.Attr(sortedStringAttrKey).(*bzl.ListExpr)
+		if !ok {
+			t.Fatalf("sorted string attributes invalid: got %v; want *bzl.ListExpr",
+				dst.Attr(sortedStringAttrKey))
+		}
+
+		expected := []string{"//foo:bar", "//foo:baz", "@qux"}
+		for i, v := range valExpr.List {
+			if v.(*bzl.StringExpr).Value != expected[i] {
+				t.Fatalf("sorted string attributes are merged: got %v; want %v",
+					v.(*bzl.StringExpr).Value, expected[i])
+			}
+		}
+	})
+
+	t.Run("sorted string attributes are merged to non-empty rule", func(t *testing.T) {
+		src := rule.NewRule("go_library", "go_default_library")
+		sortedStringAttrKey := "deps"
+		sortedStringAttrVal := rule.SortedStrings{"@qux", "//foo:bar", "//foo:baz"}
+		src.SetAttr(sortedStringAttrKey, sortedStringAttrVal)
+		dst := rule.NewRule("go_library", "go_default_library")
+		dst.SetAttr(sortedStringAttrKey, rule.SortedStrings{"@qux", "//foo:bar", "//bacon:eggs"})
+		rule.MergeRules(src, dst, map[string]bool{"deps": true}, "")
+
+		valExpr, ok := dst.Attr(sortedStringAttrKey).(*bzl.ListExpr)
+		if !ok {
+			t.Fatalf("sorted string attributes are merged: got %v; want *bzl.ListExpr",
+				dst.Attr(sortedStringAttrKey))
+		}
+
+		expected := []string{"//foo:bar", "//foo:baz", "@qux"}
+		for i, v := range valExpr.List {
+			if v.(*bzl.StringExpr).Value != expected[i] {
+				t.Fatalf("sorted string attributes are merged: got %v; want %v",
+					v.(*bzl.StringExpr).Value, expected[i])
+			}
+		}
+	})
+	t.Run("delete existing sorted strings", func(t *testing.T) {
+		src := rule.NewRule("go_library", "go_default_library")
+		sortedStringAttrKey := "deps"
+		dst := rule.NewRule("go_library", "go_default_library")
+		sortedStringAttrVal := rule.SortedStrings{"@qux", "//foo:bar", "//foo:baz"}
+		dst.SetAttr(sortedStringAttrKey, sortedStringAttrVal)
+		rule.MergeRules(src, dst, map[string]bool{"deps": true}, "")
+
+		if dst.Attr(sortedStringAttrKey) != nil {
+			t.Fatalf("delete existing sorted strings: got %v; want nil",
+				dst.Attr(sortedStringAttrKey))
+		}
+	})
+}
+
+func TestMergeRules_WithUnsortedStringAttr(t *testing.T) {
+	t.Run("unsorted string attributes are merged to empty rule", func(t *testing.T) {
+		src := rule.NewRule("go_library", "go_default_library")
+		sortedStringAttrKey := "deps"
+		sortedStringAttrVal := rule.UnsortedStrings{"@qux", "//foo:bar", "//foo:baz"}
+		src.SetAttr(sortedStringAttrKey, sortedStringAttrVal)
+		dst := rule.NewRule("go_library", "go_default_library")
+		rule.MergeRules(src, dst, map[string]bool{}, "")
+
+		valExpr, ok := dst.Attr(sortedStringAttrKey).(*bzl.ListExpr)
+		if !ok {
+			t.Fatalf("sorted string attributes invalid: got %v; want *bzl.ListExpr",
+				dst.Attr(sortedStringAttrKey))
+		}
+
+		expected := []string{"@qux", "//foo:bar", "//foo:baz"}
+		for i, v := range valExpr.List {
+			if v.(*bzl.StringExpr).Value != expected[i] {
+				t.Fatalf("unsorted string attributes are merged: got %v; want %v",
+					v.(*bzl.StringExpr).Value, expected[i])
+			}
+		}
+	})
+
+	t.Run("unsorted string attributes are merged to non-empty rule", func(t *testing.T) {
+		src := rule.NewRule("go_library", "go_default_library")
+		sortedStringAttrKey := "deps"
+		sortedStringAttrVal := rule.UnsortedStrings{"@qux", "//foo:bar", "//foo:baz"}
+		src.SetAttr(sortedStringAttrKey, sortedStringAttrVal)
+		dst := rule.NewRule("go_library", "go_default_library")
+		dst.SetAttr(sortedStringAttrKey, rule.UnsortedStrings{"@qux", "//foo:bar", "//bacon:eggs"})
+		rule.MergeRules(src, dst, map[string]bool{"deps": true}, "")
+
+		valExpr, ok := dst.Attr(sortedStringAttrKey).(*bzl.ListExpr)
+		if !ok {
+			t.Fatalf("unsorted string attributes are merged: got %v; want *bzl.ListExpr",
+				dst.Attr(sortedStringAttrKey))
+		}
+
+		expected := []string{"@qux", "//foo:bar", "//foo:baz"}
+		for i, v := range valExpr.List {
+			if v.(*bzl.StringExpr).Value != expected[i] {
+				t.Fatalf("unsorted string attributes are merged: got %v; want %v",
+					v.(*bzl.StringExpr).Value, expected[i])
+			}
+		}
+	})
+}
diff --git a/rule/rule.go b/rule/rule.go
index 8caca41..502698f 100644
--- a/rule/rule.go
+++ b/rule/rule.go
@@ -991,7 +991,9 @@ func (r *Rule) sync() {
 	r.updated = false
 
 	for _, k := range []string{"srcs", "deps"} {
-		if attr, ok := r.attrs[k]; ok {
+		attr, ok := r.attrs[k]
+		_, isUnsorted := attr.val.(UnsortedStrings)
+		if ok && !isUnsorted {
 			bzl.Walk(attr.expr.RHS, sortExprLabels)
 		}
 	}
diff --git a/rule/value.go b/rule/value.go
index 65c8ce0..c8eb532 100644
--- a/rule/value.go
+++ b/rule/value.go
@@ -65,8 +65,23 @@ func (s SortedStrings) BzlExpr() bzl.Expr {
 	return listExpr
 }
 
+func (s SortedStrings) Merge(other bzl.Expr) bzl.Expr {
+	if other == nil {
+		return s.BzlExpr()
+	}
+	merged := mergeList(s.BzlExpr().(*bzl.ListExpr), other.(*bzl.ListExpr))
+	sortExprLabels(merged, []bzl.Expr{})
+	return merged
+}
+
 type UnsortedStrings []string
 
+func (s UnsortedStrings) Merge(other bzl.Expr) bzl.Expr {
+	if other == nil {
+		return ExprFromValue(s)
+	}
+	return mergeList(ExprFromValue(s).(*bzl.ListExpr), other.(*bzl.ListExpr))
+}
 
 // SelectStringListValue is a value that can be translated to a Bazel
 // select expression that picks a string list based on a string condition.
-- 
2.25.1

