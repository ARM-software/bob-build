# Copyright 2016-2019 Arm Limited.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###################################

menu "Toolchain binary names"

config GNU_CC_BINARY
	string "GNU C compiler binary"
	default "gcc"
	help
		The name of the C compiler when the GNU toolchain is used.

config GNU_CXX_BINARY
	string "GNU C++ compiler binary"
	default "g++"
	help
		The name of the C++ compiler when the GNU toolchain is used.

config AR_BINARY
	string "GNU and Clang Archiver binary"
	default "ar"
	help
		The name of the archiver used to create static libraries.

config AS_BINARY
	string "GNU and Clang Assembler binary"
	default "as"
	help
		The name of the assembly compiler used to compile
		hand-written assembly code.

###################################

config CLANG_CC_BINARY
	string "Clang C compiler binary"
	default "clang"
	help
		The name of the C compiler when Clang toolchain is used.

config CLANG_CXX_BINARY
	string "Clang C++ compiler binary"
	default "clang++"
	help
		The name of the C++ compiler when Clang toolchain is used.

###################################

config ARMCLANG_CC_BINARY
	string "Armclang C compiler binary"
	default "armclang"
	help
		The name of the C compiler when the Arm Compiler is used.

config ARMCLANG_CXX_BINARY
	string "Armclang C++ compiler binary"
	default "armclang"
	help
		The name of the C++ compiler when the Arm Compiler is used.

config ARMCLANG_LD_BINARY
	string
	default "armlink"
	help
		The name of the linker when the Arm Compiler is used.

config ARMCLANG_AS_BINARY
	string "Armclang assembler binary"
	default "armasm"
	help
		The name of the assembly compiler used to compile
		hand-written assembly code when the Arm Compiler is used.

config ARMCLANG_AR_BINARY
	string "Armclang archiver"
	default "armar"
	help
		The name of the archiver used to create static libraries when
		the Arm Compiler is used.

config TARGET_ARMCLANG_FLAGS
	string
	default ""
	help
		Extra flags passed to the compiler when building for the
		potentially cross-compiled target with the Arm Compiler.

endmenu

menu "Host explore options"
	help
		Options set by the host exploration script during
		configuration. In most cases, do not set the values here; if
		ALLOW_HOST_EXPLORE is enabled, they will be overwritten.

config EXTRA_HOST_LDFLAGS
	string "Extra host linker options"
	help
		Specific linker options required by the host linker.

		This value is determined automatically when ALLOW_HOST_EXPLORE
		is enabled (any value set manually will be overwritten).

config EXTRA_TARGET_LDFLAGS
	string "Extra target linker options"
	help
		Specific linker options required by the target linker.

		This value is determined automatically when ALLOW_HOST_EXPLORE
		is enabled (any value set manually will be overwritten).

config EXTRA_LD_LIBRARY_PATH
	string "Extra LD_LIBRARY_PATH entries"
	help
		Library path that needs to be used to execute a binary
		compiled by the host linker.

		This value is determined automatically when ALLOW_HOST_EXPLORE
		is enabled (any value set manually will be overwritten).

endmenu

### Toolchain target options ###
# The host options are not yet read by `toolchain.go`, so are empty, and
# exist so that `host_explore.py` can be agnostic to the target type when
# doing e.g. `get_config_string(tgtType + "_GNU_TOOLCHAIN_PREFIX")`. They are
# defined here, rather than in the superproject, because even when they are
# fully supported, they will be empty most of the time.

config HOST_GNU_TOOLCHAIN_PREFIX
	string
	default ""

config HOST_GNU_FLAGS
	string
	default ""

config HOST_CLANG_TRIPLE
	string
	default ""

# The target equivalents, despite being only used by Bob, must be defined by
# the superproject so that it can add any desired defaults, etc:

# config TARGET_GNU_TOOLCHAIN_PREFIX
#	string "Cross-compiler prefix"

# config TARGET_GNU_FLAGS
#	string
#	default "-m32" if ...

# config TARGET_CLANG_TRIPLE
#	string "Clang target"

# Bob also cannot know the superproject's desired STL implementation, so the
# superproject must also define the following:

# config HOST_STL_LIBRARY
# 	string "Host STL implementation"
# 	default "stdc++"
#
# config TARGET_STL_LIBRARY
# 	string "Target STL implementation"
# 	default "stdc++"

### Toolchain configuration options ###

config HOST_CLANG_USE_GNU_LIBS
	bool "Detect the GNU toolchain's internal library locations for Clang"
	depends on HOST_TOOLCHAIN_CLANG
	default n
	help
		Detect the location of the configured GNU toolchain's `crt1.o`,
		`libgcc.a` and `libgcc_s.so`, and pass these to Clang.

config TARGET_CLANG_USE_GNU_LIBS
	bool "Detect the GNU toolchain's internal library locations for Clang"
	depends on TARGET_TOOLCHAIN_CLANG
	default y if TARGET_CLANG_TRIPLE != ""
	default n
	help
		Detect the location of the configured GNU toolchain's `crt1.o`,
		`libgcc.a` and `libgcc_s.so`, and pass these to Clang.

# This is a workaround for `depends on` not supporting the comparison operator.
config HOST_STL_LIBSTDCXX
	bool
	default y if HOST_STL_LIBRARY="stdc++"
	default n

config TARGET_STL_LIBSTDCXX
	bool
	default y if TARGET_STL_LIBRARY="stdc++"
	default n

config HOST_CLANG_USE_GNU_STL
	bool "Detect the GNU toolchain's libstdc++ implementation for Clang"
	depends on HOST_TOOLCHAIN_CLANG && HOST_STL_LIBSTDCXX
	default n
	help
		Detect the location of the configured GNU toolchain's
		STL implementation, and pass this to Clang.

config TARGET_CLANG_USE_GNU_STL
	bool "Detect the GNU toolchain's libstdc++ implementation for Clang"
	depends on TARGET_TOOLCHAIN_CLANG && TARGET_STL_LIBSTDCXX
	default y if TARGET_CLANG_TRIPLE != ""
	help
		Detect the location of the configured GNU toolchain's
		STL implementation, and pass this to Clang.
