


### Host toolchain options ###
# The host options are not yet read by `toolchain.go`, so are empty, and
# exist so that `host_explore.py` can be agnostic to the target type when
# doing e.g. `get_config_string(TgtType + "_GNU_PREFIX")`. They are
# defined here, rather than in the superproject, because even when they are
# fully supported, they will be empty most of the time.

config HOST_64BIT_ONLY
	bool "Host supports 64bit only"
	default n
	help
		"Select whether the host architecture is exclusively 64bit."

config HOST_GNU_PREFIX
	string "Host GNU compiler prefix"
	default "prebuilts/gcc/linux-x86/x86/x86_64-linux-android-4.9/bin/x86_64-linux-android-" if ANDROID
	default ""

config HOST_GNU_CC_BINARY
	string "Host GNU C compiler binary"
	default "gcc"
	help
	  The name of the host C compiler when the GNU toolchain is used.

config HOST_GNU_CXX_BINARY
	string "Host GNU C++ compiler binary"
	default "g++"
	help
	  The name of the host C++ compiler when the GNU toolchain is used.

config HOST_CLANG_PREFIX
	string "Host Clang compiler prefix"
	default "prebuilts/clang/host/linux-x86/clang-r475365b/bin/" if ANDROID_PLATFORM_VERSION = 14 && ANDROID
	default "prebuilts/clang/host/linux-x86/clang-r522817/bin/" if ANDROID_PLATFORM_VERSION > 14 && ANDROID
	default ""
	help
	  This is typically the value of ClangDefaultVersion declared in <aosp>/soong/cc/config/global.go

config HOST_CLANG_CC_BINARY
	string "Host Clang C compiler binary"
	default "clang"
	help
	  The name of the host C compiler when Clang toolchain is used.

config HOST_CLANG_CXX_BINARY
	string "Host Clang C++ compiler binary"
	default "clang++"
	help
	  The name of the host C++ compiler when Clang toolchain is used.

config HOST_ARMCLANG_PREFIX
	string "Host Arm Compiler 6 prefix"
	default ""

config HOST_ARMCLANG_CC_BINARY
	string "Host Armclang C compiler binary"
	default "armclang"
	help
	  The name of the host C compiler when the Arm Compiler is used.

config HOST_ARMCLANG_CXX_BINARY
	string "Host Armclang C++ compiler binary"
	default "armclang"
	help
	  The name of the host C++ compiler when the Arm Compiler is used.

config HOST_XCODE_PREFIX
	string "Host Xcode prefix"
	default ""

config HOST_ARMCLANG_FLAGS
	string
	default ""
	help
	  Extra flags passed to the compiler when building with the Arm Compiler.

config HOST_GNU_FLAGS
	string
	default ""

config HOST_CLANG_TRIPLE
	string
	default ""

config HOST_XCODE_TRIPLE
	string
	default ""

config HOST_SYSROOT
	string "Host sysroot"
	default ""
	help
	  The path to the host's system root directory. This should
	  contain include and lib directories, with headers and libraries
	  for the host system.

	  Generally this is expected to remain empty. The host compiler is
	  expected to have been compiled with sufficient information to
	  locate its sysroot.

### Toolchain configuration options ###

config HOST_CLANG_STL_LIBRARY
	string "Host STL implementation"
	depends on HOST_TOOLCHAIN_CLANG
	default ""
	help
	  This is the C++ Standard Template Library to link against. This
	  should either be empty (use the default), "stdc++", or "c++".

	  Only set a value if the default standard library selected by
	  clang is incorrect for the host.

config HOST_CLANG_COMPILER_RUNTIME
	string "Host compiler runtime library"
	depends on HOST_TOOLCHAIN_CLANG
	help
	  This is the compiler runtime library to link against. This
	  should either be empty (use the default), "libgcc" or
	  "compiler-rt".

	  Only set a value if the default compiler runtime selected by
	  Clang is incorrect for the host.

config HOST_CLANG_USE_GNU_CRT
	bool "Host uses GNU toolchain's startup libraries"
	depends on HOST_TOOLCHAIN_CLANG
	help
	  Detect the location of the configured GNU toolchain's `crt1.o`
	  and pass this to Clang.

config HOST_CLANG_USE_GNU_STL
	bool "Host uses GNU toolchain's STL"
	depends on HOST_TOOLCHAIN_CLANG && HOST_CLANG_STL_LIBRARY = "stdc++"
	help
	  Detect the location of the configured GNU toolchain's STL
	  and pass this to Clang.

config HOST_CLANG_USE_GNU_LIBGCC
	bool "Host uses GNU toolchain's libgcc"
	depends on HOST_TOOLCHAIN_CLANG && HOST_CLANG_COMPILER_RUNTIME = "libgcc"
	help
	  Detect the location of the configured GNU toolchain's `libgcc.a`
	  and `libgcc_s.so` and pass this to Clang.

config HOST_CLANG_USE_GNU_BINUTILS
	bool "Host uses GNU toolchain's binutils"
	depends on HOST_TOOLCHAIN_CLANG
	help
	  Add the configured GNU toolchain's `bin/` directory to Clang's binary
	  search path, allowing it to use the linker and assembler.

config HOST_OBJCOPY_BINARY
	string "Host objcopy"
	default HOST_GNU_PREFIX + "objcopy" if HOST_TOOLCHAIN_GNU || (HOST_TOOLCHAIN_CLANG && HOST_CLANG_USE_GNU_BINUTILS)
	default "llvm-objcopy" if HOST_TOOLCHAIN_CLANG
	default "objcopy"
	depends on !HOST_TOOLCHAIN_XCODE
	help
	  The objcopy executable that we can use in post install scripts
	  to manipulate host libraries and executables.

config HOST_OBJDUMP_BINARY
	string "Host objdump"
	default HOST_GNU_PREFIX + "objdump" if HOST_TOOLCHAIN_GNU || (HOST_TOOLCHAIN_CLANG && HOST_CLANG_USE_GNU_BINUTILS)
	default "llvm-objdump" if HOST_TOOLCHAIN_CLANG
	default "objdump"
	depends on !HOST_TOOLCHAIN_XCODE
	help
	  The objdump executable that we can use to extract information
	  from shared libraries.

config HOST_AR_BINARY
	string "GNU and Clang Archiver binary"
	default "ar"
	help
	  The name of the archiver used to create host static libraries.

config HOST_DSYMUTIL_BINARY
	string "Host dsymutil"
	default "dsymutil"
	depends on HOST_TOOLCHAIN_XCODE
	help
	  The dsymutil executable that we can use in post install scripts
	  to manipulate debug information in host libraries and executables.

config HOST_STRIP_BINARY
	string "Host strip"
	default "strip"
	depends on HOST_TOOLCHAIN_XCODE
	help
	  The strip executable that we can use in post install scripts
	  to strip symbols from host libraries and executables.

config HOST_OTOOL_BINARY
	string "Host otool"
	default "otool"
	depends on HOST_TOOLCHAIN_XCODE
	help
	  The otool executable that we can use to read information in
	  host library section headers.

config HOST_NM_BINARY
	string "Host nm"
	default "nm"
	depends on HOST_TOOLCHAIN_XCODE
	help
	  The nm executable that we can use to read the dynamic symbol
	  table in host libraries.
