# Copyright 2016-2019 Arm Limited.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Target toolchain options ###

# The target options are defined here so that `host_explore.py` can be
# agnostic to the target type when doing
# e.g. `get_config_string(tgtType + "_GNU_PREFIX")`.
# These are defined here, rather than in the superproject, because
# they will be empty most of the time.

config TARGET_CLANG_PREFIX
	string "Target Clang compiler prefix"
	default ""

config TARGET_ARMCLANG_PREFIX
	string "Target Arm Compiler 6 compiler prefix"
	default ""

config TARGET_XCODE_PREFIX
	string "Target Xcode prefix"
	default ""

config TARGET_ARMCLANG_FLAGS
	string
	default ""
	help
	  Extra flags passed to the compiler when building for the
	  potentially cross-compiled target with the Arm Compiler.

config TARGET_SYSROOT
	string "Target sysroot"
	default ""
	help
	  The path to the target's system root directory. This should
	  contain include and lib directories, with headers and libraries
	  for the target system.

# The following, despite being only used by Bob, must be defined by
# the superproject so that it can add any desired defaults, etc:

# config TARGET_GNU_PREFIX
#	string "Target GNU compiler prefix"
#	default ""

# config TARGET_GNU_FLAGS
#	string
#	default "-m32" if ...

# config TARGET_CLANG_TRIPLE
#	string "Target Clang triple"

# config TARGET_XCODE_TRIPLE
#	string "Target Xcode triple"

### Toolchain configuration options ###

config TARGET_CLANG_STL_LIBRARY
	string "Target STL implementation"
	depends on TARGET_TOOLCHAIN_CLANG
	default ""
	help
	  This is the C++ Standard Template Library to link against. This
	  should either be empty (use the default), "stdc++", or "c++".

	  Only set a value if the default standard library selected by
	  clang is incorrect for the target.

config TARGET_CLANG_COMPILER_RUNTIME
	string "Target compiler runtime library"
	depends on TARGET_TOOLCHAIN_CLANG
	help
	  This is the compiler runtime library to link against. This
	  should either be empty (use the default), "libgcc" or
	  "compiler-rt".

	  Only set a value if the default compiler runtime selected by
	  Clang is incorrect for the target.

config TARGET_CLANG_USE_GNU_CRT
	bool "Target uses GNU toolchain's startup libraries"
	depends on TARGET_TOOLCHAIN_CLANG
	help
	  Detect the location of the configured GNU toolchain's `crt1.o`
	  and pass this to Clang.

config TARGET_CLANG_USE_GNU_STL
	bool "Target uses GNU toolchain's STL"
	depends on TARGET_TOOLCHAIN_CLANG && TARGET_CLANG_STL_LIBRARY = "stdc++"
	help
	  Detect the location of the configured GNU toolchain's STL
	  and pass this to Clang.

config TARGET_CLANG_USE_GNU_LIBGCC
	bool "Target uses GNU toolchain's libgcc"
	depends on TARGET_TOOLCHAIN_CLANG && TARGET_CLANG_COMPILER_RUNTIME = "libgcc"
	help
	  Detect the location of the configured GNU toolchain's `libgcc.a`
	  and `libgcc_s.so` and pass this to Clang.

config TARGET_CLANG_USE_GNU_BINUTILS
	bool "Target uses GNU toolchain's binutils"
	depends on TARGET_TOOLCHAIN_CLANG
	help
	  Add the configured GNU toolchain's `bin/` directory to Clang's binary
	  search path, allowing it to use the linker and assembler.

config TARGET_OBJCOPY_BINARY
	string "Target objcopy"
	default TARGET_GNU_PREFIX + "objcopy" if TARGET_TOOLCHAIN_GNU || (TARGET_TOOLCHAIN_CLANG && TARGET_CLANG_USE_GNU_BINUTILS)
	default "llvm-objcopy" if TARGET_TOOLCHAIN_CLANG
	default "objcopy"
	help
	  The objcopy executable that we can use in post install scripts
	  to manipulate target libraries and executables.
