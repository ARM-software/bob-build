# Copyright 2016-2019 Arm Limited.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Target toolchain options ###

# The target options are defined here so that `host_explore.py` can be
# agnostic to the target type when doing
# e.g. `get_config_string(tgtType + "_GNU_PREFIX")`.
# These are defined here, rather than in the superproject, because
# they will be empty most of the time.

config TARGET_CLANG_PREFIX
	string "Target Clang compiler prefix"
	default ""

config TARGET_ARMCLANG_PREFIX
	string "Target Arm Compiler 6 compiler prefix"
	default ""

config TARGET_ARMCLANG_FLAGS
	string
	default ""
	help
	  Extra flags passed to the compiler when building for the
	  potentially cross-compiled target with the Arm Compiler.

# The following, despite being only used by Bob, must be defined by
# the superproject so that it can add any desired defaults, etc:

# config TARGET_GNU_PREFIX
#	string "Target GNU compiler prefix"
#	default ""

# config TARGET_GNU_FLAGS
#	string
#	default "-m32" if ...

# config TARGET_CLANG_TRIPLE
#	string "Target Clang triple"

# Bob also cannot know the superproject's desired STL implementation, so the
# superproject must also define the following:

# config TARGET_STL_LIBRARY
# 	string "Target STL implementation"
# 	default "stdc++"

### Toolchain configuration options ###

config TARGET_CLANG_USE_GNU_LIBS
	bool "Target uses GNU startup libraries"
	depends on TARGET_TOOLCHAIN_CLANG
	default y if TARGET_CLANG_TRIPLE != "" && !ANDROID
	default n
	help
	  Detect the location of the configured GNU toolchain's `crt1.o`,
	  `libgcc.a` and `libgcc_s.so`, and pass these to Clang.

config TARGET_CLANG_USE_GNU_STL
	bool "Target uses GNU libstdc++"
	depends on TARGET_TOOLCHAIN_CLANG && TARGET_STL_LIBRARY = "stdc++"
	default y if TARGET_CLANG_TRIPLE != "" && !ANDROID
	default n
	help
	  Detect the location of the configured GNU toolchain's
	  STL implementation, and pass this to Clang.

config TARGET_CLANG_USE_GNU_BINUTILS
	bool "Target uses GNU binutils"
	depends on TARGET_TOOLCHAIN_CLANG
	default y if !ANDROID
	help
	  Add the configured GNU toolchain's `bin/` directory to Clang's binary
	  search path, allowing it to use the linker and assembler.

config TARGET_OBJCOPY_BINARY
	string "Target objcopy"
	default TARGET_GNU_PREFIX + "objcopy" if TARGET_TOOLCHAIN_GNU || (TARGET_TOOLCHAIN_CLANG && TARGET_CLANG_USE_GNU_BINUTILS)
	default "llvm-objcopy" if TARGET_TOOLCHAIN_CLANG
	default "objcopy"
	help
	  The objcopy executable that we can use in post install scripts
	  to manipulate target libraries and executables.
