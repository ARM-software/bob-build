# ******************************************************************************
# ***            This file is generated and should not be edited             ***
# ******************************************************************************
#
# This file contains variables, rules, and pools with name prefixes indicating
# they were generated by the following Go packages:
#
#     bob       [from Go package bob]
#     bootstrap [from Go package github.com/google/blueprint/bootstrap]
#
ninja_required_version = 1.7.0

g.bob.BuildDir = redacted

g.bob.SrcDir = redacted

g.bootstrap.BinDir = redacted/.bootstrap/bin

g.bootstrap.buildDir = redacted

g.bootstrap.ninjaBuildDir = redacted

# Limit the parallelization of linking, which is memory intensive
pool g.bob.link
    depth = 1

builddir = ${g.bootstrap.ninjaBuildDir}

rule g.bob.cxx
    command = ${build_wrapper} ${cxxcompiler} -c ${cflags} ${cxxflags} -MD -MF ${depfile} ${in} -o ${out}
    depfile = ${out}.d
    deps = gcc
    description = ${out}

rule g.bob.shared_library
    pool = g.bob.link
    command = ${build_wrapper} ${linker} -shared ${in} -o ${out} ${ldflags} ${static_libs} -L${shared_libs_dir} ${shared_libs_flags} ${ldlibs}
    description = ${out}

rule g.bob.static_library
    command = rm -f ${out} && ${build_wrapper} ${ar} -rcs ${out} ${in}
    description = ${out}

rule g.bootstrap.cp
    command = cp ${in} ${out}
    description = cp ${out}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  libA
# Variant: host
# Type:    bob_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:redacted

m.libA_host.cflags = 
m.libA_host.cxxflags = 

build ${g.bob.BuildDir}/host/objects/libA/libA.cpp.o: g.bob.cxx $
        ${g.bob.SrcDir}/libA.cpp
    build_wrapper = 
    cflags = ${m.libA_host.cflags}
    cxxcompiler = g++
    cxxflags = ${m.libA_host.cxxflags}

build ${g.bob.BuildDir}/host/shared/libA.so: g.bob.shared_library $
        ${g.bob.BuildDir}/host/objects/libA/libA.cpp.o
    build_wrapper = 
    ldflags = -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/host/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/host/shared
    static_libs = 

build ${g.bob.BuildDir}/host/static/libA.a: g.bob.static_library $
        ${g.bob.BuildDir}/host/objects/libA/libA.cpp.o
    ar = ar
    build_wrapper = 

build libA__host: phony ${g.bob.BuildDir}/host/static/libA.a $
        ${g.bob.BuildDir}/host/shared/libA.so
default libA__host

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  libA
# Variant: target
# Type:    bob_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:redacted

m.libA_target.cflags = 
m.libA_target.cxxflags = 

build ${g.bob.BuildDir}/target/objects/libA/libA.cpp.o: g.bob.cxx $
        ${g.bob.SrcDir}/libA.cpp
    build_wrapper = 
    cflags = ${m.libA_target.cflags}
    cxxcompiler = g++
    cxxflags = ${m.libA_target.cxxflags}

build ${g.bob.BuildDir}/target/shared/libA.so: g.bob.shared_library $
        ${g.bob.BuildDir}/target/objects/libA/libA.cpp.o
    build_wrapper = 
    ldflags = -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/target/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/target/shared
    static_libs = 

build ${g.bob.BuildDir}/target/static/libA.a: g.bob.static_library $
        ${g.bob.BuildDir}/target/objects/libA/libA.cpp.o
    ar = ar
    build_wrapper = 

build libA__target: phony ${g.bob.BuildDir}/target/static/libA.a $
        ${g.bob.BuildDir}/target/shared/libA.so
default libA__target

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  libB
# Variant: host
# Type:    bob_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:redacted

m.libB_host.cflags = 
m.libB_host.cxxflags = 

build ${g.bob.BuildDir}/host/objects/libB/libB.cpp.o: g.bob.cxx $
        ${g.bob.SrcDir}/libB.cpp
    build_wrapper = 
    cflags = ${m.libB_host.cflags}
    cxxcompiler = g++
    cxxflags = ${m.libB_host.cxxflags}

build ${g.bob.BuildDir}/host/shared/libB.so: g.bob.shared_library $
        ${g.bob.BuildDir}/host/objects/libB/libB.cpp.o
    build_wrapper = 
    ldflags = -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/host/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/host/shared
    static_libs = 

build ${g.bob.BuildDir}/host/static/libB.a: g.bob.static_library $
        ${g.bob.BuildDir}/host/objects/libB/libB.cpp.o
    ar = ar
    build_wrapper = 

build libB__host: phony ${g.bob.BuildDir}/host/static/libB.a $
        ${g.bob.BuildDir}/host/shared/libB.so
default libB__host

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  libB
# Variant: target
# Type:    bob_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:redacted

m.libB_target.cflags = 
m.libB_target.cxxflags = 

build ${g.bob.BuildDir}/target/objects/libB/libB.cpp.o: g.bob.cxx $
        ${g.bob.SrcDir}/libB.cpp
    build_wrapper = 
    cflags = ${m.libB_target.cflags}
    cxxcompiler = g++
    cxxflags = ${m.libB_target.cxxflags}

build ${g.bob.BuildDir}/target/shared/libB.so: g.bob.shared_library $
        ${g.bob.BuildDir}/target/objects/libB/libB.cpp.o
    build_wrapper = 
    ldflags = -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/target/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/target/shared
    static_libs = 

build ${g.bob.BuildDir}/target/static/libB.a: g.bob.static_library $
        ${g.bob.BuildDir}/target/objects/libB/libB.cpp.o
    ar = ar
    build_wrapper = 

build libB__target: phony ${g.bob.BuildDir}/target/static/libB.a $
        ${g.bob.BuildDir}/target/shared/libB.so
default libB__target

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  libC
# Variant: host
# Type:    bob_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:redacted

m.libC_host.cflags = 
m.libC_host.cxxflags = 

build ${g.bob.BuildDir}/host/objects/libC/libC.cpp.o: g.bob.cxx $
        ${g.bob.SrcDir}/libC.cpp
    build_wrapper = 
    cflags = ${m.libC_host.cflags}
    cxxcompiler = g++
    cxxflags = ${m.libC_host.cxxflags}

build ${g.bob.BuildDir}/host/shared/libC.so: g.bob.shared_library $
        ${g.bob.BuildDir}/host/objects/libC/libC.cpp.o
    build_wrapper = 
    ldflags = -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/host/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/host/shared
    static_libs = 

build ${g.bob.BuildDir}/host/static/libC.a: g.bob.static_library $
        ${g.bob.BuildDir}/host/objects/libC/libC.cpp.o
    ar = ar
    build_wrapper = 

build libC__host: phony ${g.bob.BuildDir}/host/static/libC.a $
        ${g.bob.BuildDir}/host/shared/libC.so
default libC__host

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Module:  libC
# Variant: target
# Type:    bob_library
# Factory: github.com/ARM-software/bob-build/core.Main.func1.1
# Defined: build.bp:redacted

m.libC_target.cflags = 
m.libC_target.cxxflags = 

build ${g.bob.BuildDir}/target/objects/libC/libC.cpp.o: g.bob.cxx $
        ${g.bob.SrcDir}/libC.cpp
    build_wrapper = 
    cflags = ${m.libC_target.cflags}
    cxxcompiler = g++
    cxxflags = ${m.libC_target.cxxflags}

build ${g.bob.BuildDir}/target/shared/libC.so: g.bob.shared_library $
        ${g.bob.BuildDir}/target/objects/libC/libC.cpp.o
    build_wrapper = 
    ldflags = -Wl,--as-needed
    ldlibs = 
    linker = g++
    shared_libs_dir = ${g.bob.BuildDir}/target/shared
    shared_libs_flags = -Wl,-rpath-link,${g.bob.BuildDir}/target/shared
    static_libs = 

build ${g.bob.BuildDir}/target/static/libC.a: g.bob.static_library $
        ${g.bob.BuildDir}/target/objects/libC/libC.cpp.o
    ar = ar
    build_wrapper = 

build libC__target: phony ${g.bob.BuildDir}/target/static/libC.a $
        ${g.bob.BuildDir}/target/shared/libC.so
default libC__target

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Singleton: bootstrap
# Factory:   github.com/google/blueprint/bootstrap.Main.newSingletonFactory.func4

build ${g.bootstrap.buildDir}/bin/minibp: g.bootstrap.cp $
        ${g.bootstrap.BinDir}/minibp
default ${g.bootstrap.buildDir}/bin/minibp

build blueprint_tools: phony
default blueprint_tools

