load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")

# TODO: Fix config system import structure
# load("@rules_python_gazelle_plugin//:def.bzl", "GAZELLE_PYTHON_RUNTIME_DEPS")

# gazelle:exclude blueprint
# gazelle:exclude example
# gazelle:prefix github.com/ARM-software/bob-build/

gazelle_binary(
    name = "gazelle_binary",
    languages = [
        "@bazel_gazelle//language/go",
        "@bazel_gazelle//language/proto",
        # TODO: Fix config system import structure
        # "@rules_python_gazelle_plugin//python",
    ],
    visibility = ["//visibility:public"],
)

gazelle(
    name = "gazelle",
    # TODO: Fix config system import structure
    # data = GAZELLE_PYTHON_RUNTIME_DEPS,
    gazelle = ":gazelle_binary",
)

gazelle(
    name = "gazelle-update-repos",
    args = [
        "-from_file=go.mod",
        "-to_macro=deps.bzl%go_dependencies",
        "-prune",
        "-build_file_proto_mode=disable_global",
    ],
    command = "update-repos",
)

# By default, bazel run executes the binary in the sandbox with its runfiles.
# This breaks the pre-commit convention which uses relative paths from workspace root.
# This wrapper captures the location of the needed binary and changes dir to the working
# directory before calling bpfmt.
sh_binary(
    name = "bpfmt_wrapper",
    srcs = ["bpfmt_wrapper.sh"],
    data = ["@com_github_google_blueprint//bpfmt"],
)
